"use client";

import { useState, useRef, useEffect } from 'react';
import Link from 'next/link';
import { ArrowLeft, ArrowRight, Menu, Sun, Globe, Video, PenTool, Bell, AlertTriangle, Play, RotateCcw, Volume2, Download, Maximize, Headphones, Clock, ChevronDown, Pause } from 'lucide-react';
import VideoPlayer from '../../components/VideoPlayer';

export default function ApiDemo() {
  const [currentStep, setCurrentStep] = useState(1);
  const [showTranscript, setShowTranscript] = useState(false);
  const [isLightMode, setIsLightMode] = useState(false);
  const [dailyXP, setDailyXP] = useState(50);
  const [selectedVideo, setSelectedVideo] = useState('test-video');
  const [showVideoDropdown, setShowVideoDropdown] = useState(false);
  
  // Video player states
  const [playing, setPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [volume, setVolume] = useState(0.8);
  const [showControls, setShowControls] = useState(true);
  
  const videos = [
    {
      id: 'sql-joins',
      title: 'SQL Joins Tutorial',
      type: 'youtube',
      url: 'https://www.youtube.com/embed/9yeOJ0ZMUYw',
      duration: '15:30',
      presenter: 'Maham Faisal Khan',
      presenterTitle: 'Senior Content Developer, DataCamp'
    },
    {
      id: 'database-design',
      title: 'Database Design Principles',
      type: 'youtube',
      url: 'https://www.youtube.com/embed/ztHopE5Wnpc',
      duration: '12:45',
      presenter: 'Alex Johnson',
      presenterTitle: 'Database Architect, TechCorp'
    },
    {
      id: 'test-video',
      title: 'Test Video Tutorial',
      type: 'custom',
      url: '/video/test.mp4',
      duration: '10:30',
      presenter: 'Test Presenter',
      presenterTitle: 'Video Instructor'
    },
    {
      id: 'test1-video',
      title: 'Test1 Video Demo',
      type: 'custom',
      url: '/video/test1.mp4',
      duration: '15:45',
      presenter: 'Demo Presenter',
      presenterTitle: 'Content Creator'
    },
    {
      id: 'sql-optimization',
      title: 'SQL Query Optimization',
      type: 'youtube',
      url: 'https://www.youtube.com/embed/7S_tz1z_5bA',
      duration: '20:10',
      presenter: 'Emily Watson',
      presenterTitle: 'Performance Engineer, QueryMaster'
    }
  ];

  const steps = [
    {
      id: 1,
      title: "Defining relationships",
      content: "Welcome back! Now that we have written our very first SQL joins, it's time to think more conceptually about the kinds of the relationships tables can have to each other.",
      type: "concept",
      xp: 50
    },
    {
      id: 2,
      title: "One-to-many relationships",
      content: "The first type of relationship we'll talk about is a one-to-many relationship. This is the most common type of relationship, one where a single entity can be associated with several entities. Think about a music library. One artist can produce many songs over their career. This is a one-to-many relationship. The same applies for authors and their books, directors and movie titles, and so on.",
      type: "concept",
      xp: 50,
      example: {
        title: "Jane Austen wrote many books",
        description: "Jane Austen wrote many books, and each of her books had just one author. In the table schema shown, each of her works are stored in the books table, and can be merged with the authors table using author_id from both tables."
      }
    },
    {
      id: 3,
      title: "One-to-one relationships",
      content: "A second type of relationship is a one-to-one relationship. One-to-one relationships imply unique pairings between entities and are therefore less common. A commonly held premise of forensic science is that no two fingerprints are identical, and therefore that a particular fingerprint can only be generated by one person. This is an example of a one-to-one relationship: one fingerprint for one finger.",
      type: "concept",
      xp: 50,
      example: {
        title: "Fingerprint scanning at airport border control",
        description: "Border control might have two tables in a database: a table of people and a table of their prints. Each person's fingerprint could be merged with the individuals table using their passport number."
      }
    },
    {
      id: 4,
      title: "Many-to-many relationships",
      content: "The last type of relationship we'll discuss is a many-to-many relationship. An example of this is languages and countries. Here we show the official languages of Germany, Belgium and the Netherlands, where we see that many languages can be spoken in many countries.",
      type: "concept",
      xp: 50,
      example: {
        title: "Languages and countries",
        description: "Belgium has three official languages: French, German, and Dutch. Conversely, languages can be official in many countries: Dutch is an official language of both the Netherlands and Belgium, but not Germany."
      }
    },
    {
      id: 5,
      title: "Let's practice!",
      content: "Now that we have discussed the various relationships that can exist between tables, let's put this into practice!",
      type: "practice",
      xp: 50
    }
  ];

  const currentStepData = steps.find(step => step.id === currentStep);
  const currentVideo = videos.find(video => video.id === selectedVideo);

  // Reset video state when video changes
  useEffect(() => {
    console.log('Video changed to:', selectedVideo);
    setPlaying(false);
    setCurrentTime(0);
    setDuration(0);
  }, [selectedVideo]);

  // Video player event handlers
  const handlePlayPause = () => {
    setPlaying(!playing);
  };

  const handleSeek = (e: React.MouseEvent<HTMLDivElement>) => {
    // This is now handled by the VideoPlayer component
  };

  const handleSkip = (seconds: number) => {
    // This is now handled by the VideoPlayer component
  };

  const handleTimeUpdate = (time: number) => {
    setCurrentTime(time);
  };

  const handleDurationChange = (dur: number) => {
    setDuration(dur);
  };

  const handlePlay = () => {
    setPlaying(true);
  };

  const handlePause = () => {
    setPlaying(false);
  };

  const handleEnded = () => {
    setPlaying(false);
  };

  const renderVideoPlayer = () => {
    if (currentVideo?.type === 'youtube') {
      return (
        <iframe
          key={currentVideo.id} // Add key to force re-render when video changes
          src={currentVideo.url}
          title={currentVideo.title}
          className="w-full h-full"
          frameBorder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowFullScreen
        />
      );
    } else if (currentVideo?.type === 'custom') {
      console.log('Rendering custom video player with:', {
        src: currentVideo.url,
        playing,
        currentTime,
        duration
      });
      return (
        <VideoPlayer
          key={currentVideo.id} // Add key to force re-render when video changes
          src={currentVideo.url}
          onTimeUpdate={handleTimeUpdate}
          onDurationChange={handleDurationChange}
          onPlay={handlePlay}
          onPause={handlePause}
          onEnded={handleEnded}
          playing={playing}
          onPlayPause={handlePlayPause}
          onSeek={handleSeek}
          onSkip={handleSkip}
          currentTime={currentTime}
          duration={duration}
        />
      );
    } else {
      return null;
    }
  };

  return (
    <div className="min-h-screen bg-[#f5f5f5]">
      {/* Top Navigation Bar - Same as practice page */}
      <div className="bg-white border-b border-gray-200 px-4 py-2">
        <div className="max-w-screen-xl mx-auto flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <ArrowLeft className="w-4 h-4" />
            <div className="flex items-center space-x-2 text-sm">
              <Link href="/learn" className="text-gray-600 hover:text-gray-900">Learn</Link>
              <span className="text-gray-400">/</span>
              <Link href="/courses" className="text-gray-600 hover:text-gray-900">Courses</Link>
              <span className="text-gray-400">/</span>
              <span className="text-gray-900">Joining Data in SQL</span>
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <button className="flex items-center space-x-2 px-4 py-1.5 border border-gray-200 rounded-md bg-white hover:bg-gray-50">
              <ArrowLeft className="w-4 h-4" />
            </button>
            <button className="flex items-center space-x-2 px-4 py-1.5 border border-gray-200 rounded-md bg-white hover:bg-gray-50">
              <Menu className="w-4 h-4" />
              <span className="text-sm">Course Outline</span>
            </button>
            <button className="flex items-center space-x-2 px-4 py-1.5 border border-gray-200 rounded-md bg-white hover:bg-gray-50">
              <ArrowRight className="w-4 h-4" />
            </button>
          </div>

          <div className="flex items-center space-x-6">
            <div className="flex items-center space-x-2 text-sm">
              <span>Daily XP</span>
              <span className="font-bold text-red-500">{dailyXP}</span>
            </div>
            <div className="flex items-center space-x-4">
              <Globe className="w-5 h-5" />
              <span>EN</span>
              <Video className="w-5 h-5" />
              <PenTool className="w-5 h-5" />
              <Bell className="w-5 h-5" />
              <AlertTriangle className="w-5 h-5" />
              <button
                onClick={() => setIsLightMode(!isLightMode)}
                className="text-sm flex items-center space-x-1"
              >
                <Sun className="w-5 h-5" />
                <span>{isLightMode ? 'Dark' : 'Light'} mode</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content Area */}
      <div className="py-6">
        {/* Video Player Section */}
        <div className="bg-white rounded-lg shadow-lg border border-gray-200 mb-6 mx-auto" style={{ maxWidth: '85%' }}>
          {/* Video Header */}
          <div className="flex items-center justify-between p-6 border-b border-gray-200">
            <div className="flex items-center space-x-6">
              <h2 className="text-xl font-bold text-gray-900">
                {currentStepData?.title}
              </h2>
              
              {/* Video Dropdown */}
              <div className="relative">
                <button
                  onClick={() => setShowVideoDropdown(!showVideoDropdown)}
                  className="flex items-center space-x-2 px-4 py-2 border border-gray-300 rounded-lg bg-white hover:bg-gray-50 text-sm font-medium"
                >
                  <span>{currentVideo?.title}</span>
                  <ChevronDown className="w-4 h-4" />
                </button>
                
                {showVideoDropdown && (
                  <div className="absolute top-full left-0 mt-2 w-96 bg-white border border-gray-200 rounded-lg shadow-xl z-10">
                    <div className="p-3">
                      <div className="text-xs font-semibold text-gray-500 uppercase tracking-wide mb-3 px-2">
                        Select Video
                      </div>
                      {videos.map((video) => (
                        <button
                          key={video.id}
                          onClick={() => {
                            console.log('Selecting video:', video.id, video.title);
                            setSelectedVideo(video.id);
                            setShowVideoDropdown(false);
                            setPlaying(false);
                            setCurrentTime(0);
                          }}
                          className={`w-full flex items-center justify-between p-4 rounded-lg text-left hover:bg-gray-50 transition-colors ${
                            selectedVideo === video.id ? 'bg-blue-50 border border-blue-200' : ''
                          }`}
                        >
                          <div className="flex-1">
                            <div className="font-semibold text-gray-900">{video.title}</div>
                            <div className="text-sm text-gray-500 mt-1">
                              {video.presenter} • {video.duration}
                            </div>
                          </div>
                          <div className="flex items-center space-x-2">
                            <span className={`px-3 py-1 rounded-full text-xs font-semibold ${
                              video.type === 'youtube' 
                                ? 'bg-red-100 text-red-800' 
                                : 'bg-blue-100 text-blue-800'
                            }`}>
                              {video.type === 'youtube' ? 'YouTube' : 'Custom'}
                            </span>
                          </div>
                        </button>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
            
            <div className="bg-yellow-100 text-yellow-800 px-4 py-2 rounded-lg text-sm font-bold">
              {currentStepData?.xp} XP
            </div>
          </div>

          {/* Video Player */}
          <div className="relative bg-gray-900 aspect-video" style={{ maxHeight: '65vh' }}>
            {currentVideo ? (
              <div className="w-full h-full">
                {renderVideoPlayer()}
              </div>
            ) : (
              // Fallback content when no video is selected
              <div className="absolute inset-0 flex flex-col items-center justify-center text-white">
                <div className="text-center">
                  <h1 className="text-4xl font-bold mb-2">{currentStepData?.title}</h1>
                  <p className="text-xl text-gray-300 mb-6">JOINING DATA IN SQL</p>
                  <div className="bg-black text-white px-4 py-2 rounded-full text-sm font-semibold">
                    SQL
                  </div>
                </div>
                
                {/* Presenter Info */}
                <div className="absolute bottom-20 left-6 bg-purple-600 text-white px-4 py-2 rounded">
                  <div className="font-semibold">Maham Faisal Khan</div>
                  <div className="text-sm text-purple-200">Senior Content Developer, DataCamp</div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Bottom Section */}
        <div className="flex items-center justify-between px-6 py-4 mx-auto" style={{ maxWidth: '85%' }}>
          <div className="flex items-center space-x-6">
            <span className="text-gray-400 text-lg font-bold">datacamp</span>
            <button
              onClick={() => setShowTranscript(!showTranscript)}
              className="px-6 py-3 border border-gray-300 rounded-lg bg-white hover:bg-gray-50 text-sm font-medium shadow-sm"
            >
              {showTranscript ? 'Hide' : 'Show'} transcript
            </button>
          </div>
          
          <div className="flex items-center space-x-6">
            <span className="text-sm text-gray-600">
              This course is also available on the mobile app.
            </span>
            <Link href="/mobile" className="text-blue-600 hover:text-blue-800 text-sm font-medium">
              Continue learning on mobile.
            </Link>
          </div>
          
          <button className="px-8 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 font-bold text-sm shadow-sm">
            Got It!
          </button>
        </div>

        {/* Transcript Section */}
        {showTranscript && (
          <div className="mt-6 bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Transcript</h3>
            <div className="prose max-w-none">
              <p className="text-gray-700 leading-relaxed">
                {currentStepData?.content}
              </p>
              {currentStepData?.example && (
                <div className="mt-4 p-4 bg-blue-50 border-l-4 border-blue-400 rounded">
                  <h4 className="font-semibold text-blue-900 mb-2">
                    {currentStepData.example.title}
                  </h4>
                  <p className="text-blue-800">
                    {currentStepData.example.description}
                  </p>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
} 